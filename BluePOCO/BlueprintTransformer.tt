<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="$(SolutionDir)\BluePOCO\bin\Debug\ApiTransformer.dll" #>
<#@ assembly name="$(SolutionDir)BluePOCO\bin\Debug\RestSharp.dll"#>
<#@ import namespace="ApiTransformer"#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="RestSharp"#>
<#@ output extension=".cs" #>
<#
    var nameSpace = "BluePOCO";
	var filename = "Source.txt";
	var filepath = Path.Combine(Path.GetDirectoryName(this.Host.ResolvePath("")), "BluePOCO", filename);
	
	string str;
    var url = "https://raw.github.com/Grinderofl/iMenzies/master/apiary.apib";
    var textFromFile = (new WebClient()).DownloadString(url);
    var list = Transformer.GetMethodList(textFromFile);
#>
using System.ComponentModel;
using Restcoration;
using RestSharp;
using Newtonsoft.Json; 
namespace <#=nameSpace#> 
{	<#foreach(var item in list){#>
	<# str = item.Resource.Length > 1 ? string.Join("", item.Resource.Split('/').Select(x => x.Length > 0 ? x.Replace("{", "").Replace("}","").Substring(0, 1).ToUpper() + x.Replace("{","").Replace("}", "").Substring(1) : "")) : "Root";#>

	<#
		var methodList = new List<string>(); 
		foreach(var response in item.Responses)
		{
			methodList.Add(string.Format("{0} = typeof({1})", Enum.GetName(typeof (HttpStatusCode), int.Parse(response.Code)), str + response.Code));
		}
		string addText; 
		if(methodList.Any())
			addText = ", " + string.Join(", ", methodList);
		else 
			addText = "";
	#>
	

	[Rest(Resource = "<#=item.Resource#>",Method = Method.<#=item.Method#><#=addText#>)]
	<#=item.Request != null && item.Request.Json != null && item.Request.Json.Trim().Length > 0 ? ClassGenerator.Generate(item.Request.Json, str + "Request") : "public class " + str + "Request {}"#>
	<#foreach(var response in item.Responses){#>
	<#=response.Json != null && response.Json.Trim().Length > 0 ? ClassGenerator.Generate(response.Json, str+response.Code) : "public class " + str + response.Code + "{}"#>

	<#}#>
	<#}#>

}